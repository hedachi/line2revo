// Generated by CoffeeScript 1.12.7
(function() {
  var Controller, DATA;

  Controller = (function() {
    function Controller() {}

    Controller.SIMULATION_TIMES = 100000;

    Controller.init = function() {
      return $((function(_this) {
        return function() {
          _this._init();
          return $('select.item_type').on('change', function() {
            return _this._init();
          });
        };
      })(this));
    };

    Controller._init = function() {
      this.change_item_type();
      $('input[type=radio]').on('change', function() {
        return Controller.execute();
      });
      return Controller.execute();
    };

    Controller.change_item_type = function() {
      var $tr, i, option_name, ref, results;
      $('table#option_selector tr').not('#option_selector_tr_header').detach();
      ref = DATA[$('select.item_type').val()];
      results = [];
      for (i in ref) {
        option_name = ref[i];
        $tr = $('<tr/>');
        $tr.append($("<td>" + option_name + "</td>"));
        $tr.append($("<td><input class='radio_red' id='option_" + i + "_need' name='option_" + i + "' value='need' type='radio'/><label for='option_" + i + "_need'/></td>"));
        $tr.append($("<td><input checked='checked' class='radio_red' id='option_" + i + "_ok' name='option_" + i + "' value='ok' type='radio'/><label for='option_" + i + "_ok'/></td>"));
        $tr.append($("<td><input class='radio_red' id='option_" + i + "_ng' name='option_" + i + "' value='ng' type='radio'/><label for='option_" + i + "_ng'/></td>"));
        results.push($('table#option_selector').append($tr));
      }
      return results;
    };

    Controller.execute = function() {
      var all_results, conditions, i, item_type, j, name, ref, ref1, sim_results, success;
      item_type = $('select.item_type').val();
      conditions = {};
      ref = DATA[item_type];
      for (i in ref) {
        name = ref[i];
        conditions[name] = $("input[name=option_" + i + "]:checked").val();
      }
      all_results = [];
      success = 0;
      for (i = j = 0, ref1 = this.SIMULATION_TIMES; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        sim_results = _.sampleSize(DATA[item_type], 3);
        if (this.judge(item_type, conditions, sim_results)) {
          success++;
        }
        all_results.push(sim_results);
      }
      return this.show_summary(success);
    };

    Controller.show_summary = function(success) {
      $('#simulation_times').text(this.SIMULATION_TIMES.toLocaleString('en'));
      $('#success_percent').text((success * 100 / this.SIMULATION_TIMES).toFixed(1));
      return $('#success_times').text(success.toLocaleString('en'));
    };

    Controller.judge = function(item_type, conditions, sim_results) {
      var name, requirement;
      for (name in conditions) {
        requirement = conditions[name];
        if (requirement === 'need') {
          if (!(sim_results.indexOf(name) > -1)) {
            return false;
          }
        } else if (requirement === 'ok') {

        } else if (requirement === 'ng') {
          if (sim_results.indexOf(name) > -1) {
            return false;
          }
        } else {
          throw "条件が不正です。";
        }
      }
      return true;
    };

    return Controller;

  })();

  Controller.init();

  DATA = {
    weapon: ['攻撃速度増加率', 'HP吸収率', '物理攻撃力', '魔法攻撃力', 'クリティカル', 'クリティカルダメージ増加率', '防御無視ダメージ', '命中', '貫通', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    head: ['HP吸収率', '物理防御力', '魔法防御力', '状態異常抵抗率', '最大HP', '最大MP', 'HP回復量', 'MP回復量', '固定ダメージ減少', '回避', '貫通', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    body: ['移動速度増加', '物理防御力', '魔法防御力', '最大HP', '最大MP', '固定ダメージ減少', '回避', '弾力', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    arm: ['物理攻撃力', '魔法攻撃力', '最大HP', '最大MP', '防御無視ダメージ', '回避', '貫通', 'クールタイム減少率', 'MPコスト減少率', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    foot: ['攻撃速度増加率', '移動速度増加率', '物理攻撃力', '魔法攻撃力', '最大HP', '最大MP', '回避', '弾力', 'クールタイム減少', 'MPコスト減少率', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    ring: ['攻撃速度増加率', 'HP吸収率', '物理防御力', '魔法防御力', '状態異常抵抗', 'クリティカル抵抗', '最大HP', '最大MP', 'HP回復量', 'MP回復量', '固定ダメージ減少', '命中', '弾力', 'クールタイム減少', 'アデナ獲得量増加率', '経験値獲得量増加率'],
    earring: ['HP吸収率', '移動速度増加率', '状態異常抵抗率', 'クリティカル抵抗', '最大HP', '最大MP', 'HP回復量', 'MP回復量', '命中', '貫通', 'MPコスト減少率'],
    necklace: ['HP吸収率', 'クリティカル', '物理攻撃力', '魔法攻撃力', 'クリティカルダメージ増加率', '状態異常抵抗率', 'クリティカル抵抗', '最大HP', '最大MP', 'HP回復量', 'MP回復量', '防御無視ダメージ', '命中', '貫通', '弾力']
  };

}).call(this);
